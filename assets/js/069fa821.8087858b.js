"use strict";(self.webpackChunkchia_docs=self.webpackChunkchia_docs||[]).push([[5046],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return f}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),h=p(n),f=o,d=h["".concat(l,".").concat(f)]||h[f]||u[f]||i;return n?r.createElement(d,a(a({ref:t},c),{},{components:n})):r.createElement(d,a({ref:t},c))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var p=2;p<i;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},8221:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return c},default:function(){return h}});var r=n(7462),o=n(3366),i=(n(7294),n(3905)),a=["components"],s={sidebar_position:6},l="3.6 Harvester Algorithm",p={unversionedId:"03consensus/harvester_algorith",id:"03consensus/harvester_algorith",isDocsHomePage:!1,title:"3.6 Harvester Algorithm",description:"Approximately every 9.375 seconds, the full node sends a new signage point to the farmer, who sends it to each harvester.",source:"@site/docs/03consensus/harvester_algorith.md",sourceDirName:"03consensus",slug:"/03consensus/harvester_algorith",permalink:"/docs/03consensus/harvester_algorith",editUrl:"https://github.com/Chia-Network/chia-docs/blob/main/docs/03consensus/harvester_algorith.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"3.5 Signage Points and Infusion Points",permalink:"/docs/03consensus/signage_points_and_infusion_points"},next:{title:"3.7 Multiple Blocks",permalink:"/docs/03consensus/multiple_blocks"}},c=[],u={toc:c};function h(e){var t=e.components,n=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"36-harvester-algorithm"},"3.6 Harvester Algorithm"),(0,i.kt)("p",null,"Approximately every 9.375 seconds, the full node sends a new signage point to the farmer, who sends it to each harvester."),(0,i.kt)("p",null,"The exact protocol message sent for each signage point is the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class PoolDifficulty:\n    difficulty: uint64\n    sub_slot_iters: uint64\n    pool_contract_puzzle_hash: bytes32\n    \nclass NewSignagePointHarvester:\n    challenge_hash: bytes32\n    difficulty: uint64\n    sub_slot_iters: uint64\n    signage_point_index: uint8\n    sp_hash: bytes32\n    pool_difficulties: List[PoolDifficulty]\n")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"The harvester receives a signage point, and computes the plot filter:"),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"plot filter bits = sha256(plot_id + challenge_hash + sp_hash)"),"."),(0,i.kt)("p",{parentName:"li"},"If the resulting bits start with 9 zeroes, then the plot passes the filter. This does not require disk access, since the plot_ids are stored in memory.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"For each of the plots passing the filter, a new thread is started, which performs the quality lookups. Recall that this requires around 7-9 random reads into the plot, one for each table. This is where the majority of the disk activity will be. On average, 1 of every 512 plots will perform this step.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"required_iterations is computed, as explained in ",(0,i.kt)("a",{parentName:"p",href:"/docs/03consensus/signage_points_and_infusion_points",title:"Section 3.5: Signage Points and Infusion Points"},"Section 3.5"),". If the farmer is currently farming for a pool, then the pool will use custom values for both ",(0,i.kt)("inlineCode",{parentName:"p"},"difficulty")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"sub-slot_iterations"),". These values make it more likely that a proof will be found. The reason to use these values is to make it easier for the pool to determine the amount of storage a farmer currently has dedicated.\nIf required_iterations is less than the interval_iterations, this proof of space is good (it has won either a pool partial or a block). Most proofs will not pass this step.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"For winning proofs, the whole proof is fetched on disk (approximately 64 random reads in the plot).")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"The proof is sent back to the farmer."))))}h.isMDXComponent=!0}}]);