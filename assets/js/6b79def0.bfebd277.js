"use strict";(self.webpackChunkchia_docs=self.webpackChunkchia_docs||[]).push([[9553],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return h}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(n),h=o,d=u["".concat(c,".").concat(h)]||u[h]||m[h]||i;return n?r.createElement(d,a(a({ref:t},p),{},{components:n})):r.createElement(d,a({ref:t},p))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var s=2;s<i;s++)a[s]=n[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},9593:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return s},toc:function(){return p},default:function(){return u}});var r=n(7462),o=n(3366),i=(n(7294),n(3905)),a=["components"],l={sidebar_position:1},c="14.1 chia-blockchain",s={unversionedId:"14python-implementation/python-implementation",id:"14python-implementation/python-implementation",isDocsHomePage:!1,title:"14.1 chia-blockchain",description:"chia-blockchain is the first and official implementation of the Chia protocol. It is written",source:"@site/docs/14python-implementation/python-implementation.md",sourceDirName:"14python-implementation",slug:"/14python-implementation/python-implementation",permalink:"/docs/14python-implementation/python-implementation",editUrl:"https://github.com/Chia-Network/chia-docs/blob/main/docs/14python-implementation/python-implementation.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"TODO",permalink:"/docs/13cli/cli"},next:{title:"15.1 References",permalink:"/docs/15resources/references"}},p=[],m={toc:p};function u(e){var t=e.components,n=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"141-chia-blockchain"},"14.1 chia-blockchain"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"chia-blockchain")," is the first and official implementation of the Chia protocol. It is written\nin python, with a few dependencies written in C++ or rust in order to improve performance. It\nis written from the ground up by the Chia team as well as open source contributors, and is not\na fork of any other blockchain system."),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/Chia-Network/chia-blockchain"},"https://github.com/Chia-Network/chia-blockchain")),(0,i.kt)("p",null,"The codebase is split into several subfolders which categorize code on the different components\nof the system. Inside the source root (chia folder)."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"cmds"),": Contains the command line interface program, which is a python wrapper around the chia RPC api. When a command is run, a connection is established directly to the Chia services running locally."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"consensus"),": Consensus critical code that is high risk to change."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"daemon"),": Server that runs the daemon, launching and stopping the other services."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"farmer"),": Farmer server which handles signing blocks, coordinating the harvesters and communicating with a node. "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"full_node"),": A large portion of the business logic of Chia is here, storing blocks and coins, full node protocol, etc."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"harvester"),": Code to handle harvester interaction with plot files and the filesystem"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"introducer"),": Temporary introducer server which has been partially replaced with DNS introducers."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"plotters"),": Code for wrapping 3rd party plotters such as MadMax and Bladebit."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"plotting"),": Code for creating plots and handling plot creation parameters, as well as checking plot correctness."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"pools"),": Code for the handling of plot NFTs and pooling (on the wallet side)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"protocols"),": Protocol specification, also explained in section 10."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"rpc"),": RPC Server and RPC api specification for all services."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"server"),": Networking and Websocket server."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"simulator"),": A wrapper around the full node which allows creating and farming blocks, and running a local custom blockchain."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"ssl"),": Managing TLS connections and certificates."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"timelord"),": Code for running timelords, which uses the ",(0,i.kt)("inlineCode",{parentName:"li"},"chiavdf")," dependency and connects to vdf clients."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"types"),": Blockchain format and python types used throughout the project."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"util"),": A collection of many utility files and functions used throughout the project."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"wallet"),": Subdirectory containing all code relating to wallets and chialisp. This contains a large amount of code.")))}u.isMDXComponent=!0}}]);